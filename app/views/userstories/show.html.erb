<div class="row dark_background left_padding center">
  <h2>Welcome to Warehouse on the Web! Here's some notes on the documentation.</h2>

  <div class="left">
    <h4>Home Page:</h4>
    <ul>
        <li class="doc-list">1. The home page displays welcome message. </li>
        <li>2. The Documentation link is reached by clicking the “Documentation” button in the nav bar or navigating to /help. The button shows in the nav bar whether the user is logged in or not.</li>
    </ul>


    <h4>Users:</h4>
    <ul>

        <li>1. A user can sign up for a developer account with Warehouse on the Web by clicking “Sign Up” in the nav and providing a name, email address, and password. User passwords are encrypted.</li>
        <li>2. Once a user has made an account, they will be able to click “Sign In” in the nav and will be directed to their account. Users are not automatically signed in by signing up; they will have to manually sign in.</li>
        <li>3. If an unknown user attempts to sign in, the page will refresh and respond with the notice, “Unknown user--trying signing up instead!”</li></br>
        <li>4. If a known user attempts to sign in but provides the wrong password, the page will refresh and respond with the notice, “Incorrect password! Try again.”</li>
        <li>5. Once a user has properly signed in, a greeting appears in the nav with their name. They now have access to the “Your API key” tab in the nav.</li></br>
        <li>6. Users are automatically provided with an API key when creating an account. They do not need to sign up for one separately.</li>
        <li>7. Clicking “Sign Out” in the nav will destroy the user’s session.</li></br>
        <li>7. Clicking “Delete my account” in the nav will make the user's account inaccesible.</li></br>
    </ul>

    <h4>Using the API:</h4>
    <ul>
        <li>1. There are four API endpoints: 1) To get the total inventory for a user 2) To get the inventory for a specific items for a particular user 3) To post inventory for storage and 4) to post inventory for shipment.</li></br>
        <li>2. The end points are formatted with the user's API key as a query parameter. Below are example urls for use with get and post calls.</li></br>
        <ul>
            <li>Get total inventory: https://warehouseontheweb.herokuapp.com/api/inventory/?apikey=[insert API key here]</li></br>
            <li>Get inventory for specific item using the sku: https://warehouseontheweb.herokuapp.com/api/inventory/[insert sku here]/?apikey=[insert API key here]</li></br>
            <li>Post inventory for storage: https://warehouseontheweb.herokuapp.com/api/inventory/?apikey=[insert API key here]</li></br>
            <li>Post inventory for shipping: https://warehouseontheweb.herokuapp.com/api/orders/?apikey=[insert API key here]<li></br>
        </ul>
        <li>3. No body/parameters are expected for either get request.</li></br>
        <li>4. Parameters are expected with post requests. For posting inventory for storage, the user must provide the item sku, quantity, and status. For posting and order (inventory for shipping), the user must provide the sku, quantity, and address. If these parameters are not provided, the request will still go through, but the value of the parameters will be NULL.</li></br>
        <li>5. When submitting a get request for inventory in general or for a specific item, there are several checks that the request will go through. If the API key does not belong to a user in the datebase, the request will not return a json object of the items, but rather a json object containing the message "Error: There was an error retrieving your items."</li></br>
        <li>6. When submitting a post request for storage, there are several checks that the request will go through. If the API key does not belong to a user in the database, the request will return a json object containing the message "Error: Your user was not found in the database." If the request does not succeed for another reaons, the response will be "Error: Your POST request was not processed." If the request succeeds and the specified item already has a listing with the same status, the quantity of that item will increase by the quantity in the request. If the request succeeds and the specified item does not yet have a listing with the same status (though it might already have a listing with a different status), a new item instance is created. </li></br>
        <li>7. When submitting a post request for an order, the status of the item is assumed to be "Preparing for Shipment", and that status will be assigned to the item. There are again several checks that the request will go through to determine if it is valid. The checks for the user existence and general errors are the same as the post request for storage. If there are already items with the status "preparing for shipment", the quantity of items with that status will increase by the number of items sent in the post request. However, the system will check if there are enough items still in stock to add to an order. If not, the response will be "Error: You don't have enough items in stock!" If there are enough items, the the quantity of items with the status "In Stock" will decrease by the quantity sent in the post request. In addition to updating or creating an instance of an item, an instance of an order will also be created. Even if they have the same address, orders will never be combined, because they are technically separate orders made at separate times, even if being sent to the same person. Therefore an order instance is always created, never updated. Potential responses to the post request are: "Error: You don't have enough items in stock!", "Thanks for submitting your post request!", "Error: Your POST request was not processed.", or "Error: Your user was not found in the database."</li></br>
        <li>8. When submitting a post request, the user can only submit <em>one item at a time</em>, with the structure as follows: {"status": "In Stock", "sku": "a123","quantity": 50}. Status and sku are strings; quantity is an integer. Item id and user id are set automatically by the system querying the database. </li></br>
    </ul>
</div>
</div>